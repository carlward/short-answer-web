{"version":3,"sources":["TextArea.js","ScoreTable.js","AnswerScoreResult.js","AnswerBoxes.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","props","formControl","touched","valid","react_default","a","createElement","className","Object","assign","ScoreRow","metric","name","ScoreTable","rows","score","estimScore","push","ScoreTable_ScoreRow","key","scoreProbs","forEach","probs","toPrecision","AnswerScoreResult","src_ScoreTable","ENDPOINT","API_KEY","process","SHORT_ANSWER_INFERENCE_API_KEY","lengthValidator","value","length","minLength","maxLength","requiredValidator","trim","validate","rules","isValid","rule","AnswerBoxes","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","target","updatedInputs","objectSpread","state","formInputs","updatedFormElement","validationRules","id","setState","handleSubmit","formData","payload","seq","refSeq","postData","then","data","entries","isSubmitted","catch","console","log","url","fetch","method","mode","headers","Content-Type","x-api-key","body","JSON","stringify","res","json","studentAnswer","placeholder","isRequired","refAnswer","htmlFor","src_TextArea","onChange","onClick","disabled","src_AnswerScoreResult","React","Component","App","src_AnswerBoxes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.160718c0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TextArea = props => {\n  let formControl = \"form-input\";\n  if (props.touched && !props.valid) {\n    formControl = 'form-input input-error';\n  }\n\n  return (\n    <div className=\"form-group\">\n      <textarea {...props} className={formControl} />\n    </div>\n  );\n}\n\nexport default TextArea\n","import React from 'react'\n\nconst ScoreRow = props => {\n  const metric = props.metric;\n  const name = props.name;\n\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{metric}</td>\n    </tr>\n  );\n}\n\nconst ScoreTable = props => {\n  const rows = [];\n  const score = props.estimScore;\n  rows.push(\n    <ScoreRow\n      metric={score}\n      name=\"Score\"\n      key={score}\n    />\n  )\n  props.scoreProbs.forEach((probs) =>\n    rows.push(\n      <ScoreRow\n        metric={probs[1].toPrecision(4)}\n        name={probs[0]}\n        key={probs[1]}\n      />\n    )\n  );\n\n  return (\n    <table className={props.className}>\n      <thead>\n        <tr>\n          <th>Metric</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n}\n\nexport default ScoreTable\n","import React from 'react'\nimport ScoreTable from './ScoreTable'\n\nconst AnswerScoreResult = props => {\n  return (\n    <div className=\"result-table\">\n      <ScoreTable\n        estimScore={props.estimScore}\n        scoreProbs={props.scoreProbs}\n        className=\"result-table\"\n      />\n    </div>\n  );\n}\n\nexport default AnswerScoreResult\n","import React from 'react';\n// import ReactTable from \"react-table\";\nimport TextArea from './TextArea.js';\nimport AnswerScoreResult from './AnswerScoreResult.js';\nconst ENDPOINT = 'https://8wplgcc305.execute-api.us-west-2.amazonaws.com/prod/score-answers';\nconst API_KEY = process.env.SHORT_ANSWER_INFERENCE_API_KEY;\n\nconst lengthValidator = (value, length) => {\n  return value.length >= length.minLength && value.length <= length.maxLength;\n}\nconst requiredValidator = value => {\n  return value.trim() !== '';\n}\n\nconst validate = (value, rules) => {\n  let isValid = true;\n\n  for (let rule in rules) {\n    switch (rule) {\n      case 'length': isValid = isValid && lengthValidator(value, rules[rule]); break;\n      case 'isRequired': isValid = isValid && requiredValidator(value); break;\n      default: isValid = true;\n    }\n\n  }\n  return isValid;\n}\n\nclass AnswerBoxes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isValid: false,\n      isSubmitted: false,\n      estimScore: 1,\n      scoreProbs: [],\n      formInputs: {\n        studentAnswer: {\n          value: '',\n          valid: false,\n          placeholder: 'Enter student answer',\n          validationRules: {\n            length: {\n              minLength: 5,\n              maxLength: 500\n            },\n            isRequired: true\n          },\n          touched: false\n        },\n        refAnswer: {\n          value: '',\n          valid: false,\n          placeholder: 'Enter reference answer',\n          validationRules: {\n            length: {\n              minLength: 5,\n              maxLength: 500\n            },\n            isRequired: true\n          },\n          touched: false\n        }\n      }\n    };\n  }\n\n  handleChange = (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    const updatedInputs = {\n      ...this.state.formInputs\n    };\n    const updatedFormElement = {\n      ...updatedInputs[name]\n    };\n\n    updatedFormElement.value = value;\n    updatedFormElement.touched = true;\n    updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n    updatedInputs[name] = updatedFormElement;\n\n    let isValid = true;\n    for (let id in updatedInputs) {\n      isValid = isValid && updatedInputs[id].valid\n    }\n\n    this.setState({\n      formInputs: updatedInputs,\n      isValid: isValid\n    });\n\n  }\n\n  handleSubmit = () => {\n    const formData = {};\n    for (let id in this.state.formInputs) {\n      formData[id] = this.state.formInputs[id].value;\n    }\n    const payload = {\n      \"seq\": [formData[\"studentAnswer\"]],\n      \"refSeq\": [formData[\"refAnswer\"]],\n    }\n    this.postData(ENDPOINT, payload)\n      .then((data) => {\n        this.setState({\n          estimScore: data.data[0].estimScore,\n          scoreProbs: Object.entries(data.data[0].scoreProbs),\n          isSubmitted: true\n        })\n      })\n      .catch(console.log)\n    console.log(this.state);\n  }\n\n  postData = (url, payload) => {\n    return fetch(url, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': API_KEY,\n      },\n      body: JSON.stringify(payload)\n    })\n      .then(res => res.json())\n  }\n\n  render() {\n    return (\n      <div className=\"App-AnswerBoxes\">\n        <label htmlFor=\"studentAnswer\" className=\"studentAnswer\">Student Answer</label>\n        <TextArea\n          name=\"studentAnswer\"\n          placeholder={this.state.formInputs.studentAnswer.placeholder}\n          value={this.state.formInputs.studentAnswer.value}\n          onChange={this.handleChange}\n          touched={this.state.formInputs.studentAnswer.touched}\n          valid={this.state.formInputs.studentAnswer.valid}\n        />\n        <label htmlFor=\"studentAnswer\" className=\"refAnswer\">Reference Answer</label>\n        <TextArea\n          name=\"refAnswer\"\n          placeholder={this.state.formInputs.refAnswer.placeholder}\n          value={this.state.formInputs.refAnswer.value}\n          onChange={this.handleChange}\n          touched={this.state.formInputs.refAnswer.touched}\n          valid={this.state.formInputs.refAnswer.valid}\n        />\n        <button\n          onClick={this.handleSubmit}\n          disabled={!this.state.isValid}\n        >\n          Submit\n        </button>\n        {\n          this.state.isSubmitted &&\n          <label htmlFor=\"scoreResult\" className=\"result\">Result</label>\n        }\n        {\n          this.state.isSubmitted &&\n          <AnswerScoreResult\n            name=\"scoreResult\"\n            estimScore={this.state.estimScore}\n            scoreProbs={this.state.scoreProbs}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default AnswerBoxes\n","import React from 'react';\n// import logo from './logo.svg';\nimport AnswerBoxes from './AnswerBoxes.js'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Automated Short Answer Grader</h2>\n      </header>\n      <h3>Grader Demo</h3>\n      <AnswerBoxes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}